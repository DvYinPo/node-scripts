"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("node:fs"),r=require("node:path");require("node:url");var o=require("node:child_process"),s={};const n=e,t=r;function i(e){if(!e)return console.log("require project dir!!!"),!1;const r=t.resolve(e,"package.json");let o=!1;if(n.existsSync(r)){const e=function(e){throw new Error('Could not dynamically require "'+e+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}(r);o=e.dependencies?.typescript||e.devDependencies?.typescript}const s=n.existsSync(t.join(e,"tsconfig.json"));return o||s}const c=o,l=r,a=e;var u=s.exportAll=function(e,r,o="esm"){if(!["esm","cjs"].includes(o))return void console.log("mode must be esm or cjs!!!");Array.isArray(e)&&(e=t.resolve(...e)),(r=r.trim().replace(/\/$/,"").trim()).startsWith("./")||r.startsWith("../")||(r="./"+r);const s=i(e)?"index.ts":"index.js",c=t.resolve(e,r);if(!n.existsSync(c))return void console.log(`no such file or directory!!!\n=> ${c}`);const l=n.readdirSync(c).reduce(((e,s)=>{const i=t.resolve(c,s);if(n.statSync(i).isDirectory()){const c=n.existsSync(t.resolve(i,"index.ts")),l=n.existsSync(t.resolve(i,"index.js")),a=[];c&&a.push(t.resolve(i,"index.ts")),l&&a.push(t.resolve(i,"index.js")),a.forEach((t=>{const i=n.readFileSync(t,"utf-8");if("esm"===o){e+=`export * from '${r}/${s}';\n`;i.includes("export default")&&(e+=`export { default as ${s} } from '${r}/${s}';\n`)}else e+=`module.exports.${s} = require('${r}/${s}');\n`}))}else console.log("=> file",i);return e}),"");n.writeFileSync(t.resolve(e,s),l,"utf-8")},p=s.versionCheck=function(e){if(!e)return console.log("require project path!!!"),process.exit(1),!1;Array.isArray(e)&&(e=l.resolve(...e));let r={};try{const o=a.readFileSync(l.resolve(e,"./package.json"),"utf-8");r=JSON.parse(o)}catch(e){return console.log("package.json parse error!!!"),process.exit(1),!1}const o=r.version,s=r.repository.url;if(!s)return console.log("package.json require repository.url !!!"),process.exit(1),!1;return o===c.execSync(`npm show ${s} version`).toString().trim()?(console.log("\nThe local version is not up to date. please update package version before push!\n"),process.exit(1),!1):(console.log("\nThe local version is already up to date.\n"),!0)};exports.default=s,exports.exportAll=u,exports.versionCheck=p;
